
@{
    ViewBag.Title = "AgregarCarrito";
}

<h2>CARRITO DE COMPRAS</h2>

@if (Session["carrito"] != null)
{
    <main>
        <div class="basket">

            <div class="basket-labels">
                <ul>
                    <li class="item item-heading">PRODUCTO</li>
                    <li class="price">PRECIO</li>
                    <li class="quantity">CANTIDAD</li>
                    <li class="subtotal">SUBTOTAL</li>
                </ul>
            </div>
            @{ double p = 0;}
            @foreach (var item in Session["carrito"] as List
                    <DSW_CL2_JOSUE_CHUPICA.Models.CarritoItem>
                        )
            {
                <div class="basket-product">
                    <div class="item">
                        <div class="product-image">
                            <img width="140" src="@Url.Action("getImage", "Producto", new { id = item.Producto.IDE_PRO })" alt="Placholder Image 2" class="product-frame">
                        </div>

                    </div>
                    <div class="price" style="font-size: 15px">@item.Producto.PRE_PRO</div>
                    <div class="quantity">
                        <input type="number" value="1" min="1" class="quantity-field">
                    </div>
                    <div class="subtotal">@(item.Producto.PRE_PRO * 1) </div>
                    <div class="remove">
                        @Html.ActionLink("Eliminar", "Delete", "Carrito", new { id = item.Producto.IDE_PRO }
                     , new { @class = "btn btn-danger" })
                    </div>
                </div>p += item.Producto.PRE_PRO;
            }

        </div>
        <aside>
            <div class="summary">
                <div class="summary-total-items">Cantidad de Productos: <span class="total-items"></span> </div>
                <div class="summary-subtotal">
                    <div class="subtotal-title">Subtotal</div>
                    <div class="subtotal-value final-value" id="basket-subtotal">@(p)</div>
                    <div class="summary-promo hide">
                        <div class="promo-title">Promotion</div>
                        <div class="promo-value final-value" id="basket-promo"></div>
                    </div>
                </div>
                <div class="summary-subtotal">
                    <div class="subtotal-title">Envio</div>
                    <div class="subtotal-value final-value" id="basket-subtotal">5</div>
                </div>
                <div class="summary-total">
                    <div class="total-title">Total</div>
                    <div class="total-value final-value" id="basket-total">@(p + 5)</div>
                </div>

            </div>
        </aside>
    </main>


    <br />
    @Html.ActionLink("Seguir Comprando", "Index", "Producto") 
    <br />
    @Html.ActionLink("Terminar Compra", "FinalizarCompra", "Carrito")}


@section scripts{
    <script>
    /* Set values + misc */
        var promoCode;
        var promoPrice;
        var fadeTime = 300;

        /* Assign actions */

        $('.quantity input').change(function () {
            updateQuantity(this);
        });

        $('.remove button').click(function () {
            removeItem(this);
        });

        $(document).ready(function () {
            updateSumItems();
        });

        $('.promo-code-cta').click(function () {

            promoCode = $('#promo-code').val();

            if (promoCode == '10off' || promoCode == '10OFF') {
                //If promoPrice has no value, set it as 10 for the 10OFF promocode
                if (!promoPrice) {
                    promoPrice = 10;
                } else if (promoCode) {
                    promoPrice = promoPrice * 1;
                }
            } else if (promoCode != '') {
                alert("Invalid Promo Code");
                promoPrice = 0;
            }
            //If there is a promoPrice that has been set (it means there is a valid promoCode input) show promo
            if (promoPrice) {
                $('.summary-promo').removeClass('hide');
                $('.promo-value').text(promoPrice.toFixed(2));
                recalculateCart(true);
            }
        });

        /* Recalculate cart */
        function recalculateCart(onlyTotal) {
            var subtotal = 0;

            /* Sum up row totals */
            $('.basket-product').each(function () {
                subtotal += parseFloat($(this).children('.subtotal').text());
            });

            /* Calculate totals */
            var total = subtotal + 5;

            //If there is a valid promoCode, and subtotal < 10 subtract from total
            var promoPrice = parseFloat($('.promo-value').text());
            if (promoPrice) {
                if (subtotal >= 10) {
                    total -= promoPrice;
                } else {
                    alert('Order must be more than £10 for Promo code to apply.');
                    $('.summary-promo').addClass('hide');
                }
            }

            /If switch for update only total, update only total display/
            if (onlyTotal) {
                /* Update total display */
                $('.total-value').fadeOut(fadeTime, function () {
                    $('#basket-total').html(total.toFixed(2));
                    $('.total-value').fadeIn(fadeTime);
                });
            } else {
                /* Update summary display. */
                $('.final-value').fadeOut(fadeTime, function () {
                    $('#basket-subtotal').html(subtotal.toFixed(2));
                    $('#basket-total').html(total.toFixed(2));
                    if (total == 0) {
                        $('.checkout-cta').fadeOut(fadeTime);
                    } else {
                        $('.checkout-cta').fadeIn(fadeTime);
                    }
                    $('.final-value').fadeIn(fadeTime);
                });
            }
        }

        /* Update quantity */
        function updateQuantity(quantityInput) {
            /* Calculate line price */
            var productRow = $(quantityInput).parent().parent();
            var price = parseFloat(productRow.children('.price').text());
            var quantity = $(quantityInput).val();
            var linePrice = price * quantity;

            /* Update line price display and recalc cart totals */
            productRow.children('.subtotal').each(function () {
                $(this).fadeOut(fadeTime, function () {
                    $(this).text(linePrice.toFixed(2));
                    recalculateCart();
                    $(this).fadeIn(fadeTime);
                });
            });

            productRow.find('.item-quantity').text(quantity);
            updateSumItems();
        }

        function updateSumItems() {
            var sumItems = 0;
            $('.quantity input').each(function () {
                sumItems += parseInt($(this).val());
            });

            $('.total-items').text(sumItems);
        }

        /* Remove item from cart */
        function removeItem(removeButton) {
            /* Remove row from DOM and recalc cart total */
            var productRow = $(removeButton).parent().parent();
            productRow.slideUp(fadeTime, function () {
                productRow.remove();
                recalculateCart();
                updateSumItems();
            });
        }</script>
}
